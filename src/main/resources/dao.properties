insert.bill = INSERT INTO bills (reservation_id, total_price) VALUES (
get.bill = SELECT * FROM bills WHERE reservation_id = '
create.bill = CREATE TABLE IF NOT EXISTS bills(bill_id SERIAL PRIMARY KEY NOT NULL, \
  reservation_id INTEGER REFERENCES reservations(reservation_id) UNIQUE NOT NULL, \
  billing_date TIMESTAMP CONSTRAINT bill_date DEFAULT CURRENT_TIMESTAMP NOT NULL, \
  total_price INTEGER NOT NULL)
insert.reservation = INSERT INTO reservations (client_id, arriving_date, departure_date, status) \
  VALUES (?,?,?,?::reservation_status) RETURNING reservation_id
update1.reservation = UPDATE reservations SET status = '
update2.reservation = ' WHERE reservation_id = '
check1.reservation = SELECT * FROM reserved_rooms rr JOIN reservations r \
  ON r.reservation_id = rr.reservation_id WHERE (arriving_date <= '
check2.reservation = ' AND departure_date > '
check3.reservation =') AND status = 'CONFIRMED' OR (arriving_date < '
check4.reservation =' AND departure_date >= '
check5.reservation =') AND status = 'CONFIRMED' OR ('
check6.reservation =' <= arriving_date AND '
check7.reservation =' > arriving_date) AND status = 'CONFIRMED'
create.reservation =CREATE TABLE IF NOT EXISTS reservations (reservation_id SERIAL PRIMARY KEY NOT NULL, \
  client_id INTEGER REFERENCES users(user_id) NOT NULL, \
  reservation_date TIMESTAMP CONSTRAINT reserv_date DEFAULT CURRENT_TIMESTAMP NOT NULL, \
  arriving_date TIMESTAMP(8) NOT NULL, departure_date TIMESTAMP(8) NOT NULL, status RESERVATION_STATUS NOT NULL)
enum.reservation = CREATE TYPE IF NOT EXISTS reservation_status AS ENUM ( 'NEW', 'CONFIRMED', 'REJECTED')
insert.res_room = INSERT INTO reserved_rooms (reservation_id, room_type_id) VALUES (?,?)
update.res_room = UPDATE reserved_rooms SET room_number = ? WHERE reserved_room_id = \
  (SELECT reserved_room_id FROM reserved_rooms \
  WHERE room_number IS NULL AND reservation_id = ? AND room_type_id = ? LIMIT 1)
get.res_room = SELECT * FROM reserved_rooms WHERE reservation_id = '
create.res_room = CREATE TABLE IF NOT EXISTS reserved_rooms (reserved_room_id SERIAL PRIMARY KEY NOT NULL,\
   reservation_id INTEGER REFERENCES reservations(reservation_id) NOT NULL,\
   room_type_id INTEGER REFERENCES room_types(room_type_id) NOT NULL,\
   room_number INTEGER REFERENCES rooms(room_number))
get.room = SELECT * FROM rooms
create.room = CREATE TABLE IF NOT EXISTS rooms (room_number INTEGER PRIMARY KEY NOT NULL, \
  room_type_id INTEGER REFERENCES room_types(room_type_id) NOT NULL, "balcony BOOLEAN NOT NULL)
insert.room = INSERT INTO rooms (room_number, room_type_id, balcony) VALUES (?, ?, ?)
get.room_type = SELECT * FROM room_types
create.room_type = CREATE TABLE IF NOT EXISTS room_types (room_type_id SERIAL PRIMARY KEY NOT NULL,\
   room_category CATEGORY NOT NULL, bedspace BED_SPACE NOT NULL, price INTEGER NOT NULL)
category.room_type = CREATE TYPE IF NOT EXISTS category AS ENUM ( 'STANDARD', 'SUITE', 'DELUXE')
bedspace.room_type = CREATE TYPE IF NOT EXISTS bed_space AS ENUM ( 'SINGLE', 'DOUBLE', 'TWIN')
insert1.room_type = INSERT INTO room_types (room_category, bedspace, price) VALUES ('STANDARD', 'SINGLE', '130')
insert2.room_type = INSERT INTO room_types (room_category, bedspace, price) VALUES ('STANDARD', 'DOUBLE', '140')
insert3.room_type = INSERT INTO room_types (room_category, bedspace, price) VALUES ('STANDARD', 'TWIN', '140')
insert4.room_type = INSERT INTO room_types (room_category, bedspace, price) VALUES ('SUITE', 'DOUBLE', '260')
insert5.room_type = INSERT INTO room_types (room_category, bedspace, price) VALUES ('SUITE', 'TWIN', '260')
insert6.room_type = INSERT INTO room_types (room_category, bedspace, price) VALUES ('DELUXE', 'DOUBLE', '370')
insert.user = INSERT INTO users (name, login, password) VALUES (?,?,?)
get_by_login.user = SELECT * FROM users WHERE login = ?
verify.user = SELECT * FROM users WHERE login = ? AND password = ?
create.user = CREATE TABLE IF NOT EXISTS users (user_id SERIAL PRIMARY KEY NOT NULL, \
  name VARCHAR(30) NOT NULL, login VARCHAR(30) UNIQUE NOT NULL, password VARCHAR(20) NOT NULL)