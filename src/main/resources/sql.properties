insert.bill = INSERT INTO bills (reservation_id, total_price) VALUES (?, ?)
get.bill = SELECT * FROM bills WHERE reservation_id = ?

insert.reservation = INSERT INTO reservations (client_id, arriving_date, departure_date) \
  VALUES (?,?,?) RETURNING reservation_id

insert.res_room = D
get.res_room = SELECT * FROM reserved_rooms WHERE reservation_id = ?

insert.room = INSERT INTO rooms (room_number, room_type_id, balcony) VALUES (201, 1, false)
get.room = D

st_single.room_type = INSERT INTO room_types (room_category, bedspace, price) VALUES ('STANDARD', 'SINGLE', '130')
st_double.room_type = INSERT INTO room_types (room_category, bedspace, price) VALUES ('STANDARD', 'DOUBLE', '140')
st_twin.room_type = INSERT INTO room_types (room_category, bedspace, price) VALUES ('STANDARD', 'TWIN', '140')
su_double.room_type = INSERT INTO room_types (room_category, bedspace, price) VALUES ('SUITE', 'DOUBLE', '260')
su_twin.room_type = INSERT INTO room_types (room_category, bedspace, price) VALUES ('SUITE', 'TWIN', '260')
de_double.room_type = INSERT INTO room_types (room_category, bedspace, price) VALUES ('DELUXE', 'DOUBLE', '370')
get.room_type = SELECT * FROM room_types

insert.user = INSERT INTO users (name, login, password) VALUES (?,?,?)
get.user = SELECT * FROM users WHERE login = ?
verify.user = SELECT * FROM users WHERE login = ? AND password = ?

create.bill = CREATE TABLE IF NOT EXISTS bills(bill_id BIGSERIAL PRIMARY KEY NOT NULL, \
  reservation_id BIGINT REFERENCES reservations(reservation_id) UNIQUE NOT NULL, \
  billing_date TIMESTAMP CONSTRAINT bill_date DEFAULT CURRENT_TIMESTAMP NOT NULL, \
  total_price NUMERIC(100,2) CHECK(total_price > 0) NOT NULL)

create.reservation = CREATE TABLE IF NOT EXISTS reservations (reservation_id BIGSERIAL PRIMARY KEY NOT NULL, \
  client_id BIGINT REFERENCES users(user_id) NOT NULL, \
  reservation_date TIMESTAMP CONSTRAINT reserv_date DEFAULT CURRENT_TIMESTAMP NOT NULL, \
  arriving_date TIMESTAMP(8) NOT NULL, departure_date TIMESTAMP(8) NOT NULL)

create.res_room = CREATE TABLE IF NOT EXISTS reserved_rooms (reserved_room_id BIGSERIAL PRIMARY KEY NOT NULL,\
   reservation_id BIGINT REFERENCES reservations(reservation_id) NOT NULL,\
   room_type_id INTEGER REFERENCES room_types(room_type_id) NOT NULL,\
   room_id INTEGER REFERENCES rooms(room_id) NOT NULL)

create.room = CREATE TABLE IF NOT EXISTS rooms (room_id SERIAL PRIMARY KEY NOT NULL,\
  room_number INTEGER CHECK(room_number > 0) UNIQUE NOT NULL, \
  room_type_id INTEGER REFERENCES room_types(room_type_id) NOT NULL, balcony BOOLEAN NOT NULL)

create.room_type = CREATE TABLE IF NOT EXISTS room_types (room_type_id SERIAL PRIMARY KEY NOT NULL,\
   room_category CATEGORY NOT NULL, bedspace BED_SPACE NOT NULL, price NUMERIC(100,2) CHECK(price > 0) NOT NULL)

create.user = CREATE TABLE IF NOT EXISTS users (user_id BIGSERIAL PRIMARY KEY NOT NULL, \
  name VARCHAR(30) NOT NULL, login VARCHAR(30) UNIQUE NOT NULL, password VARCHAR(20) NOT NULL)

category.room_type = CREATE TYPE IF NOT EXISTS category AS ENUM ( 'STANDARD', 'SUITE', 'DELUXE')
bedspace.room_type = CREATE TYPE IF NOT EXISTS bed_space AS ENUM ( 'SINGLE', 'DOUBLE', 'TWIN')


#update.res_room = UPDATE reserved_rooms SET room_number = ? WHERE reserved_room_id = \
 # (SELECT reserved_room_id FROM reserved_rooms \
  #WHERE room_number IS NULL AND reservation_id = ? AND room_type_id = ? LIMIT 1)